#!/bin/ruby
################################################################################
####
#### Bumblebee - Configurator
#### Copyright (c) 2016 Alces Software Ltd
####
##################################################################################
require 'yaml'
require 'net/http'
require 'aws-sdk'
require 'socket'

# Collect instance information
metadata_endpoint = 'http://169.254.169.254/latest/meta-data/'
platform = Net::HTTP.get(URI.parse(metadata_endpoint + 'network/'))

if platform["interfaces/"]

  platform = 'aws'
  instance_id = Net::HTTP.get(URI.parse(metadata_endpoint + 'instance-id' ))
  puts "Found instance ID: #{instance_id}"
  getregion = Net::HTTP.get(URI.parse(metadata_endpoint + 'placement/availability-zone'))
  region = getregion[0..-2]
  puts "Found AWS region: #{region}"

  # Set up the EC2 client
  Aws.config[:region] = region
  Aws.config[:credentials] = Aws::InstanceProfileCredentials.new
  ec2 = Aws::EC2::Client.new

elsif platform['Not Found']

  platform = 'openstack'
  instance_id = Net::HTTP.get(URI.parse(metadata_endpoint + 'local-ipv4' ))

end

config = YAML.load_file('/opt/bumblebee/etc/cluster.yml')
interfaceconfig = config['interfaces']
clusterconfig = config['instance']

nodename = clusterconfig['profile']
domain = clusterconfig['domain']
cluster = clusterconfig['cluster']

if cluster.to_s.empty?
  fqdn = "#{nodename}.#{domain}"
else
  fqdn = "#{nodename}.#{cluster}.#{domain}"
end

if interfaceconfig.nil?

  puts "No additional interfaces found. Setting default interface up"

  eth0_ip = Net::HTTP.get(URI.parse(metadata_endpoint + 'local-ipv4'))

  system `hostnamectl set-hostname #{fqdn}`
  system `hostnamectl set-hostname --transient #{fqdn}`

  system `sed -i "/127.0.0.1 #{nodename}/d" /etc/hosts`
  system `sed -i "/::1 #{nodename}/d" /etc/hosts`

  open('/etc/hosts', 'a') { |w|
    w.puts "#{eth0_ip} #{fqdn} #{nodename}"
  }

else

  interfaceconfig.each do |interface,info|

    intname = info['name']
    ipaddr = info['ipaddr']
    netmask = info['netmask']
    subnetid = info['subnetid']
    subnetname = info['subnetname']
    primary_interface = info['primary_interface']
    deviceindex = intname.gsub(/[^0-9]/,"")

    if platform == 'aws'
      createint = ec2.create_network_interface({
        subnet_id: subnetid,
        description: "#{subnetname} interface for #{instance_id}",
        private_ip_address: ipaddr,
      })
      # Generate network_interface_id
      network_interface_id = createint.network_interface.network_interface_id

      attachint = ec2.attach_network_interface({
        network_interface_id: network_interface_id,
        instance_id: instance_id,
        device_index: deviceindex,
      })
      # Generate attachment_id
      attachment_id = attachint.attachment_id

      modifyint = ec2.modify_network_interface_attribute({
        network_interface_id: network_interface_id,
        attachment: {
          attachment_id: attachment_id,
          delete_on_termination: true,
        }
      })

    end

    printf "Found interface #{intname}\n"

    intconfig=File.open("/etc/sysconfig/network-scripts/ifcfg-#{intname}", 'w')

    intconfig.puts "DEVICE=\"#{intname}\"\n"
    intconfig.puts "ONBOOT=\"yes\"\n"
    intconfig.puts "TYPE=\"Ethernet\"\n"
    if ipaddr.to_s.empty?
      printf "Configuring interface #{intname} on #{subnetname}\n"
      intconfig.puts "BOOTPROTO=\"dhcp\"\n"
      intconfig.puts "PEERDNS=\"no\"\n"
      intconfig.puts "PEERROUTES=\"no\"\n"
      intconfig.puts "DEFROUTE=\"no\"\n"
    else
      intconfig.puts "BOOTPROTO=\"none\"\n"
      intconfig.puts "IPADDR=\"#{ipaddr}\"\n"
      intconfig.puts "NETMASK=\"#{netmask}\"\n"
    end

    intconfig.close

    intwait = `while [ ! "$(/sbin/ip addr | grep "#{intname}")" ]; do sleep 1; done`
    intup = `/sbin/ifup #{intname} > /dev/null`
    system(intwait)
    system(intup)

    if primary_interface.to_s.empty?
    elsif primary_interface == true

      puts "Configuring #{instance_id} as #{fqdn} with primary interface #{intname}"

      open('/etc/hosts', 'a') { |w|

        if ipaddr.to_s.empty?

          dhcpip = `ifconfig #{intname} | grep "inet" | awk 'NR==1{print $2}'`
          w.puts "#{dhcpip.to_s.chomp} #{fqdn.to_s.chomp} #{nodename.to_s.chomp}"

        else

          w.puts "#{ipaddr} #{fqdn} #{nodename}"

        end
      }
    end

  end

end
