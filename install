#!/bin/bash
set -ex
################################################################################
##
## Bumblebee - Installer
## Copyright (c) 2016 Alces Software Ltd
##
################################################################################
## Write a fake config file for now, to be replaced with magic
cat << EOF > /etc/alces-interfaces
tail=10
profilename=login1
clustername=testcluster1
domain=alces.network
EOF

## Check interface config file is present
if [ ! -f /etc/alces-interfaces ];
then
    printf "Configuration file not present, waiting"
    while [ ! -f /etc/alces-interfaces ];
    do
        sleep 10
        printf "."
    done
    printf "\n"
fi

## Test AWS credentials
awsbin="/bin/aws"
if [ $($awsbin ec2 --region eu-west-1 --output json describe-subnets | grep "Unable\ to\ locate\ credentials") ]; 
then 
    echo "No valid AWS credentials found"
    exit 1
fi

## Gather required information
source /etc/alces-interfaces
awsregion=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')
instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
buildsubnet=$($awsbin ec2 --region $awsregion describe-subnets \
				--filters Name=tag:Name,Values=${clustername}-build | grep SubnetId | awk '{print $2}' | tr -d '",')
prvsubnet=$(aws ec2 --region $awsregion describe-subnets \
				--filters Name=tag:Name,Values=${clustername}-prv | grep SubnetId | awk '{print $2}' | tr -d '",')

## Create, configure and attach interfaces
buildintcreate=$(awsbin ec2 --output table --region $awsregion create-network-interface \
					--subnet-id $buildsubnet \
					--description "Build interface for $HOSTNAME" \
					--private-ip-address "10.75.10.$tail" | grep NetworkInterfaceId | awk '{print $4}')
prvintcreate=$($awsbin ec2 --output table --region $awsregion create-network-interface \
                    --subnet-id $prvsubnet \
                    --description "Prv interface for $HOSTNAME" \
                    --private-ip-address "10.75.20.$tail" | grep NetworkInterfaceId | awk '{print $4}')
buildintattach=$($awsbin ec2 --output table --region $awsregion attach-network-interface \
                    --network-interface-id ${buildintcreate} \
                    --instance-id $instanceid \
                    --device-index 1 | grep AttachmentId | awk '{print $4}')
prvintattach=$($awsbin ec2 --output table --region $awsregion attach-network-interface \
                    --network-interface-id ${prvintcreate} \
                    --instance-id $instanceid \
                    --device-index 2 | grep AttachmentId | awk '{print $4}')
$awsbin ec2 --region $awsregion modify-network-interface-attribute \
    --network-interface-id $buildintcreate \
    --attachment "AttachmentId=${buildintattach},DeleteOnTermination=true"
$awsbin ec2 --region $awsregion modify-network-interface-attribute \
    --network-interface-id $prvintcreate \
    --attachment "AttachmentId=${prvintattach},DeleteOnTermination=true"

## Set hostname
hostnamectl set-hostname ${profilename}.${domain}
hostnamectl set-hostname --transient ${profilename}.${domain}

## Create interface configs
cat << EOF > /etc/sysconfig/network-scripts/ifcfg-eth1
DEVICE="eth1"
BOOTPROTO="none"
ONBOOT="yes"
TYPE="Ethernet"
IPADDR="10.75.10.${tail}"
NETMASK="255.255.255.0"
EOF
cat << EOF > /etc/sysconfig/network-scripts/ifcfg-eth2
DEVICE="eth2"
BOOTPROTO="none
ONBOOT="yes"
TYPE="Ethernet"
IPADDR="10.75.20.${tail}"
NETMASK="255.255.255.0"
EOF

## Bring each interface up
while [ ! "$(ip addr | grep "eth2")" ] || [ ! "$(ip addr | grep "eth1")" ];
do
    sleep 1
done
echo "Found build interface: eth1"
echo "Found prv interface: eth2"
ifup eth1 && ifup eth2
